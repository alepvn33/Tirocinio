data inizio: Martedì 20/09/22
data fine: Mercoledì 21/09/22

Punto di partenza: 
Script di Paolo, leggermente modificati per aggiungere ottimizzazioni (hash + seed)

Cose da fare:
1) Ottenere bit di challenge (b) e intero z dall'hash di messaggio + commitment.
2) Generalizzare insieme ristretto di interi, ottenuto con le potenze di un elemento di Fq:
	#Zq = Integers(31)
	#E = [Zq(2)^i for i in range(multiplicative_order(Zq(2)))]

   In questo modo, moltiplicazioni tra elementi di questo insieme danno altri elementi dell'insieme,
   perciò monomiali (tao) ristretti danno vettori i cui elementi sono ristretti.
3) Iniziare a vedere come implementare merkle tree su SageMath.

Cose fatte:
1) Fatto il 20/09/22. Passo da stringa hex a intero (Integer e non int perchè questi due tipi sono diversi: il primo è 'sage.rings.integer.Integer', il secondo è 'int'), 
   poi da intero a binario.
2) Fatto il 20/09/22. Occhio ad utilizzare solo le funzioni che usano il "current sage random number state" del module{sage.misc.randstate} e non quelle di python 
   classico (module{random}), perchè non usano gli stessi seed! 
   Il set ristretto viene generato, includendo anche lo 0, come tutte le possibili potenze di una base "m" scelta in Fq. Per fare ciò viene valutato l'ordine 
   moltiplicativo di m in Fq.
3) Fatto il 21/09/22. Ho utilizzato la classe sage.combinat.ordered_tree.LabelledOrderedTree di SageMath. Dopo aver definito il messaggio da hashare e il numero di blocchi, 
   esso viene separato in blocchi, ognuno dei quali viene hashato per formare le foglie dell'albero. Successivamente, tramite la funzione joiner() fatta da me le label dei nodi 
   dell'ultimo livello costruito dell'albero vengono hashate due a due per formare le label dei nodi del livello superiore, fino ad arrivare al nodo root. 
   Non si riesce a visualizzare graficamente perchè dallo script non funziona l'oggetto .plot() dell'albero, copiando lo script sulla CL interattiva invece funziona ma le label 
   esadecimali sono lunghissime rendendo la foto illeggibile. Verificando però alcuni hash (considerando che i digest sono stringhe) su https://emn178.github.io/online-tools/sha256.html
   i risultati sono giusti.