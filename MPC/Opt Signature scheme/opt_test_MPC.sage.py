

# This file was *autogenerated* from the file opt_test_MPC.sage
from sage.all_cmdline import *   # import sage library

_sage_const_31 = Integer(31); _sage_const_256 = Integer(256); _sage_const_204 = Integer(204); _sage_const_10 = Integer(10); _sage_const_128 = Integer(128); _sage_const_400 = Integer(400); _sage_const_20 = Integer(20); _sage_const_0 = Integer(0); _sage_const_4 = Integer(4); _sage_const_5 = Integer(5); _sage_const_1024p = RealNumber('1024.'); _sage_const_1 = Integer(1)
reset()

import hashlib
import numpy
import sys
from time import perf_counter

load('/home/sage/OneDrive/Desktop/Cose per tirocinio/Tirocinio/MPC/Opt Signature scheme/opt_MPC_utils.sage')
load('/home/sage/OneDrive/Desktop/Cose per tirocinio/Tirocinio/MPC/Opt Signature scheme/merkletools.sage')

#Scheme parameters
q = _sage_const_31 ;         #Select prime integer q (size of the field)
n = _sage_const_256 
r = _sage_const_204 
w = _sage_const_10 ;          #Private key weight
_lambda = _sage_const_128     #Seed bit lenght
N = _sage_const_400           #Number of instances
s_num = _sage_const_20        #Number of chosen rounds (|S|)
mex = "Ciao!"
avg = True       #True if average measurements over 5 executions are needed, False otherwise

#Preparations to execute the protocol
Fq=GF(q) #finite field with q elements
Fq_set = Set(Fq)
Fq_star = Fq_set.difference([_sage_const_0 ]) #multiplicative group of Fq

#Key generation
e, Htr_unsys, s, pk_seed = key_gen()

#MPC-in-the-head identification
ok, sig_size, tot_time = MPC_id(e,Htr_unsys,s,mex,s_num)
if avg:
    for i in range(_sage_const_4 ):
        ok_tmp, sig_size_tmp, tot_time_tmp = MPC_id(e,Htr_unsys,s,mex,s_num)
        sig_size += sig_size_tmp
        tot_time += tot_time_tmp
    sig_size = sig_size/_sage_const_5 
    tot_time = tot_time/_sage_const_5 




print("\nSigned message: "+mex)
print("\nSignature size: "+str(sig_size/_sage_const_1024p )+" KB")
print("\nPublic Key size (seed): "+str(sys.getsizeof(pk_seed))+" B")
if ok==_sage_const_1 :
    print(Bcolors.BOLD+Bcolors.UNDERLINE+Bcolors.OKGREEN+"\nSignature ACCEPTED!\n"+Bcolors.ENDC+Bcolors.ENDC);
else:
    print(Bcolors.BOLD+Bcolors.UNDERLINE+Bcolors.FAIL+"\nSignature REJECTED!\n"+Bcolors.ENDC+Bcolors.ENDC);



print("Total execution time: "+str(tot_time)+" seconds")

